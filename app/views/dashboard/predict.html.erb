<div id="content">
  <h1>Your Projected Future Energy Consumption (Multi-variate Linear regression  model) </h1>
  <br><br><br>

  <form id="side_panel">
    <section>
      <div id="legend"></div>
    </section>
    <section>
      <div id="renderer_form" class="toggler">
        <input type="radio" name="renderer" id="area" value="area" checked>
        <label for="area">area</label>
        <input type="radio" name="renderer" id="bar" value="bar">
        <label for="bar">bar</label>
        <input type="radio" name="renderer" id="line" value="line">
        <label for="line">line</label>
        <input type="radio" name="renderer" id="scatter" value="scatterplot">
        <label for="scatter">scatter</label>
      </div>
    </section>
    <section>
      <div id="offset_form">
        <label for="stack">
          <input type="radio" name="offset" id="stack" value="zero" checked>
          <span>stack</span>
        </label>
        <label for="stream">
          <input type="radio" name="offset" id="stream" value="wiggle">
          <span>stream</span>
        </label>
        <label for="pct">
          <input type="radio" name="offset" id="pct" value="expand">
          <span>pct</span>
        </label>
        <label for="value">
          <input type="radio" name="offset" id="value" value="value">
          <span>value</span>
        </label>
      </div>
      <div id="interpolation_form">
        <label for="cardinal">
          <input type="radio" name="interpolation" id="cardinal" value="cardinal" checked>
          <span>cardinal</span>
        </label>
        <label for="linear">
          <input type="radio" name="interpolation" id="linear" value="linear">
          <span>linear</span>
        </label>
        <label for="step">
          <input type="radio" name="interpolation" id="step" value="step-after">
          <span>step</span>
        </label>
      </div>
    </section>
    <section>
      <h6>Smoothing</h6>

      <div id="smoother"></div>
    </section>
    <section></section>
  </form>

  <div id="chart_container">
    <div id="chart"></div>
    <div id="timeline"></div>
    <div id="preview"></div>
  </div>
</div>

<script>
    var start_time = <%= @start_time %>;
    var window_size = <%= @window_size %>;
    var end_time = <%= @start_time + @window_size %>;
    var Gem = new Object();

    Gem.Data = function (timeInterval) {

        var addData;
        timeInterval = timeInterval || 1;
        var timeBase = start_time;

        this.addData = function (data, seriesData) {
            for (var i = 0; i < 1; i++) {
                var counter = 0;
                data[i + 1].forEach(function (datum) {
                    seriesData[i].push({ x: (data[0][counter++]), y: +datum });
                });
            }
        };

        this.removeData = function (data) {
            data.forEach(function (series) {
                series.shift();
            });
            timeBase += timeInterval;
        };
    };

    // set up our data series with 150 random data points
    d3.json("/dashboard/future_data_by_date.json?start_time=" + start_time + "&end_time=" + end_time, function (error, data) {
        var seriesData = [
            []
        ];
        var random = new Gem.Data();

        random.addData(data, seriesData);

        var palette = new Rickshaw.Color.Palette({ scheme: 'classic9' });

        // instantiate our graph!

        var graph = new Rickshaw.Graph({
            element: document.getElementById("chart"),
            width: 900,
            height: 500,
            renderer: 'area',
            stroke: true,
            preserve: true,
            series: [
                {
                    color: palette.color(),
                    data: seriesData[0],
                    name: 'Value'
                }
            ]
        });

        graph.render();

        var preview = new Rickshaw.Graph.RangeSlider.Preview({
            graph: graph,
            element: document.getElementById('preview')
        });

        var hoverDetail = new Rickshaw.Graph.HoverDetail({
            graph: graph,
            xFormatter: function (x) {
                return new Date(x * 1000).toString();
            }
        });

        var annotator = new Rickshaw.Graph.Annotate({
            graph: graph,
            element: document.getElementById('timeline')
        });

        var legend = new Rickshaw.Graph.Legend({
            graph: graph,
            element: document.getElementById('legend')

        });

        var shelving = new Rickshaw.Graph.Behavior.Series.Toggle({
            graph: graph,
            legend: legend
        });

        var order = new Rickshaw.Graph.Behavior.Series.Order({
            graph: graph,
            legend: legend
        });

        var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({
            graph: graph,
            legend: legend
        });

        var smoother = new Rickshaw.Graph.Smoother({
            graph: graph,
            element: $('#smoother')
        });

        var ticksTreatment = 'glow';

        var xAxis = new Rickshaw.Graph.Axis.Time({
            graph: graph,
            ticksTreatment: ticksTreatment,
            timeFixture: new Rickshaw.Fixtures.Time.Local()
        });

        xAxis.render();

        var yAxis = new Rickshaw.Graph.Axis.Y({
            graph: graph,
            tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
            ticksTreatment: ticksTreatment
        });

        yAxis.render();


        var controls = new RenderControls({
            element: document.querySelector('form'),
            graph: graph
        });

        // add some data every so often

        var messages = [
            "Changed home page welcome message",
            "Minified JS and CSS",
            "Changed button color from blue to green",
            "Refactored SQL query to use indexed columns",
            "Added additional logging for debugging",
            "Fixed typo",
            "Rewrite conditional logic for clarity",
            "Added documentation for new methods"
        ];

        var responseData = [
            []
        ];

        setInterval(function () {
            random.removeData(seriesData);

            if (responseData[0].length == 0) {
                start_time = end_time;
                end_time = start_time + window_size;
                d3.json("/dashboard/future_data_by_date.json?user_id=1&start_time=" + start_time + "&end_time=" + end_time, function (error, data) {
                    responseData = data;
                    random.addData(responseData, seriesData);
                });
            }

            graph.update();

            random.removeData(responseData);
        }, 3000);

        function addAnnotation(force) {
            if (messages.length > 0 && (force || Math.random() >= 0.95)) {
                annotator.add(seriesData[0][seriesData[0].length - 1].x, messages.shift());
                annotator.update();
            }
        }

        addAnnotation(true);
        setTimeout(function () {
            setInterval(addAnnotation, 6000)
        }, 6000);

        var previewXAxis = new Rickshaw.Graph.Axis.Time({
            graph: preview.previews[0],
            timeFixture: new Rickshaw.Fixtures.Time.Local(),
            ticksTreatment: ticksTreatment
        });

        previewXAxis.render();
    });

</script>

